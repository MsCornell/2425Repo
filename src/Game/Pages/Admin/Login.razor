@page "/Login"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
@using BlazorWebAppAuthentication.Models.Data;
@using BlazorWebAppAuthentication.Models.ViewModels;
@using Microsoft.AspNetCore.Http;
@inject AppDbContext appDbContext;
@inject NavigationManager navigationManager;

 builder = WebApplication.CreateBuilder(args);
    builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents();
        builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options => {
            options.Cookie.Name = "auth_token";
            options.LoginPath = "/login";
            options.Cookie.MaxAge = TimeSpan.FromMinutes(30);
        })

    builder.Services.AddAuthentication();
    builder.Services.AddCascadingAuthenticationState();


<PageTitle>Login</PageTitle>

<div class="container">
    <div class="inner-container">
        <div class="back-button" @onclick="NavigateToLoginBox">
            <div class="arrow"></div>
        </div>

        <div class="header">Login</div>

        <div class="microsoft-login">
            <img src="/Images/microsoftlogo.jpg" alt="Microsoft Logo">
                <div class="microsoft-login-text">Login with Microsoft</div>
            </div>

        <div class="google-login">
            <img src="/Images/googlelogo.jpg" alt="Google Logo">
                <div class="google-login-text">Login with Google</div>
            </div>

        <div class="divider">OR</div>

        <label for="username" class="input-label">Username</label>
        <div class="input-container">
            <img src="/Images/name-icon.jpg" alt="User Icon">
            <InputText id="username" @bind-Value="loginModel.Username" placeholder="Your username" class="form-control" />
        </div>

        <label for="password" class="input-label">Password</label>
        <div class="input-container">
            <img src="/Images/lock-icon.jpg" alt="Lock Icon">
            <InputText id="password" type="@(showPassword ? "text" : "password")" @bind-Value="loginModel.Password" placeholder="Your password" class="form-control" />
             <span class="toggle-password" @onclick="TogglePassword">ðŸ‘€</span>
        </div>

        <div class="remember-me">
            <InputCheckbox id="remember" @bind-Value="loginModel.RememberMe" />
            <label for="remember">Remember me</label>
        </div>

        <div class="login-btn" @onclick="NavigateToHome">Login</div>

         <div class="forgot-password" @onclick="NavigateToReset">Forgot password?</div>
        <div class="terms">
            By continuing, you agree to the <span @onclick="NavigateToTerms">Terms of Services & Privacy Policy</span>.
        </div>
    </div>
</div>

<style> 
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: Rubik, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #809ED3;
    }

    .container {
        width: 100%;
        max-width: 375px;
        height: 100vh;
    using Microsoft.AspNetCore.Authentication;
    using System.Security.Claims;
    using System.IO.Pipes;
        position: relative;
        background-color: #809ED3;
        border-radius: 20px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

    .inner-container {
        background-color: white;
        border-radius: 20px;
        width: 100%;
        max-width: 354px;
        padding: 20px;
        position: relative;
        border: 1px solid;
    }

    .header {
        text-align: center;
        color: black;
        font-size: 1.7rem;
        font-weight: 500;
        margin-bottom: 30px;
    }

    .microsoft-login {
        background-color: white;
        border-radius: 20px;
        border: 2px solid #CCCCCC;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 16px;
        padding: 12px;
        margin-bottom: 20px;
        cursor: pointer;
        font-weight: bold;
    }

        .microsoft-login img {
            width: 20px;
            height: 20px;
        }

        .microsoft-login-text {
            color: black;
            font-size: 15px;
            font-weight: bold;
        }

    .google-login {
        background-color: white;
        border-radius: 20px;
        border: 2px solid #CCCCCC;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 16px;
        padding: 12px;
        margin-bottom: 20px;
        cursor: pointer;
        font-weight: bold;
    }

        .google-login img {
            width: 20px;
            height: 20px;
        }

        .google-login-text {
            color: black;
            font-size: 15px;
            font-weight: bold;
        }

    .divider {
        display: flex;
        align-items: center;
        margin: 20px 0;
        color: black;
    }

        .divider:before, .divider:after {
            content: "";
            flex: 1;
            height: 1px;
            background: black;
            margin: 0 10px;
        }

    .input-label {
        margin-bottom: 5px;
        font-size: 0.95rem;
        color: black;
        display: block;
    }

    .input-container {
        width: 100%;
        margin-bottom: 20px;
        position: relative;
    }

        .input-container img {
            width: 20px;
            height: 20px;
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
        }

        .input-container input {
        width: 100%;
        padding: 12px 12px 12px 40px;
        border: 2px solid #CCCCCC;
        border-radius: 20px;
        font-size: 16px;
        }

        .input-container .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
        }

    .remember-me {
        display: flex;
        align-items: center;
        justify-content: center;
        color: black;
        margin-bottom: 20px;
        font-size: 0.9rem;
    }

        .remember-me input {
            margin-right: 8px;
        }

    .login-btn {
        width: 100%;
        background-color: black;
        color: white;
        border-radius: 20px;
        padding: 16px;
        text-align: center;
        font-size: 16px;
        font-weight: 500;
        margin-bottom: 20px;
        cursor: pointer;
    }

    .forgot-password {
        text-align: center;
        color: black;
        font-size: 16px;
        font-weight: 500;
        margin-bottom: 20px;
        cursor: pointer;
    }

    .terms {
        text-align: center;
        color: black;
        font-size: 13px;
        margin-top: 20px;
        margin-bottom: 10px;
    }

        .terms span {
            font-weight: 500;
            cursor: pointer;
        }
</style>

@code{

namespace Game.Pages.Admin
{

    public partial class Login : ComponentBase
    {

   

        [Inject]
        private NavigationManager Navigation { get; set; } = default!;

        [Inject]
        private IJSRuntime JSRuntime { get; set; } = default!;

        // Logging in components
        [CascadingParameter]
        public HttpContext? HttpContext{get;set;}


        [SupplyParameterFromForm]
        public LoginModel loginModel{get;set;} = new();
        public static string? ErrorMessage;
        private async Task Authenticate(){
            var userAccount = appDbContext.UserAccounts.Where(x => x.Username == Model.Username).firstOrDefault();
            if(userAccount is null || userAccount.Password != Model.Password){
                errorMessage = "Invalid username or password."
                return;
            }

            var claims = new List<Claim>{
                new Claim(ClaimTypes.Name, Model.Username);
            }

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext.SignInAsync(principal);
            navigationManager.NavigateTo("/Home")
        }

        private bool showPassword = false;

        private void TogglePassword()
        {
            showPassword = !showPassword;
        }

        private void HandleLogin()
        {
            if (loginModel.Username == "user123" && loginModel.Password == "pass123")
            {
                Navigation.NavigateTo("/Home");
            }
            else
            {
                JSRuntime.InvokeVoidAsync("alert", "You have entered an invalid username or password.");
            }
        }

         private void NavigateToLoginBox()
        {
            Navigation.NavigateTo("/LoginBox");
        }

        private void NavigateToReset()
        {
            Navigation.NavigateTo("/Reset");
        }

        private void NavigateToTerms()
        {
            Navigation.NavigateTo("/Terms");
        }

        private void NavigateToHome()
        {
            Navigation.NavigateTo("/Home");
        }

        public class LoginModel
        {
            [Required(AllowEmptyStrings = false, ErrorMessage = "Please provide a username.")]
            public string? Username { get; set; } = string.Empty;

            [Required(AllowEmptyStrings = false, ErrorMessage = "Please provide a password.")]
            public string? Password { get; set; } = string.Empty;

            public bool RememberMe { get; set; } = false;
        }
    }
}
}
